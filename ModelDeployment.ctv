<CRANTaskView>

   <name>ModelDeployment</name>
   <topic>Model Deployment in R</topic>
   <maintainer email="terrytangyuan@gmail.com">Yuan Tang</maintainer>
   <version>2018-03-07</version>

  <info>
    <p>
      This CRAN task view contains a list of packages, grouped by topic, that
      provides functionalities to streamline the process of deploying models to 
      scoring or inferencing on new data on various environments, such as 
      mobile devices, edge devices, cloud, GPUs, etc.
    </p>
    
    <p>
      Deploying models is often challenging due to the following reasons:
    </p>
    
    <ul>
      <li>
        It involves deploying models on heterogenous environments, e.g. edge devices, 
        mobile devices, GPUs, etc.
      </li>
      <li>
        It is hard to compress the model to very small size that could fit on devices 
        with limited storage while avoiding high overhead to decompress it before model inference.
      </li>
      <li>
        It is hard to make sure the trained model can process new data records within limited memory.
      </li>
      <li>
        Not all environments have good network connectivity so sometimes cloud solutions may not 
        satisfy the requirements.
      </li>

    </ul>

    <p>
      Many of the areas discussed in this Task View are undergoing rapid
      change in industries and academia. Please send suggestions for additions and extensions for this task
      view to the <a href="mailto:terrytangyuan@gmail.com">task view maintainer</a>.
    </p>

    <p><strong>Mobile/Edge Devices</strong></p>
    
    <p>
    This section includes packages that provides functionalities to export the trained
model to an artifact that could fit in small devices such as mobile devices
(e.g. Android, iOS) and edge devices (Rasberri Pi). These packages are built
based on different model format.
    </p>

    <p>
Predictive Model Markup Language (PMML) is an XML-based language which
provides a way for applications to define statistical and data mining models
and to share models between PMML compliant applications. The following packages
are based on PMML:
    </p>
    <ul>
      <li>The <pkg>pmml</pkg> package provides the main interface to PMML.</li>
      <li>The <pkg>pmmlTransformations</pkg> package allows for data to be transformed before using it to
construct models. Builds structures to allow functions in the PMML package to
output transformation details in addition to the model in the resulting PMML file.
      </li>
      <li>The <pkg>rattle</pkg> package allows to load data from a CSV file (or via ODBC), transform and explore the data, build and evaluate models, and export models as PMML or as scores.
      </li>
    </ul>
    
    <p>
Plain Old Java Object (POJO) or a Model ObJect, Optimized (MOJO) are intended to
be easily embeddable in any Java environment. The only compilation and runtime
dependency for a generated model is a .jar file produced as the
build output of these packages. The <pkg>h2o</pkg> package provides easy-to-use interface to
build machine learning models that can then be exported as MOJO and POJO format.
    </p>
    
    <p><a href="https://www.tensorflow.org/">TensorFlow</a> ExportedModel as well as its optimized version <a href="https://www.tensorflow.org/mobile/tflite/">TensorFlow Lite</a> aimed for small devices called, which uses many techniques for achieving low latency such as
optimizing the kernels for mobile apps, pre-fused activations, and quantized
kernels that allow smaller and faster (fixed-point math) models. It enables
on-device machine learning inference with low latency and small binary size.
The following packages can produce models in this format:
    </p>
    <ul>
      <li>The <pkg>tensorflow</pkg> package provides full access to TensorFlow API for numerical computation using data flow graphs.</li>
      <li>The <pkg>tfestimators</pkg> package provides high-level API to machine learning models as well as highly customized neural network architectures.</li>
      <li>The <pkg>keras</pkg> package high-level API to construct different types of neural networks.</li>
    </ul>
    
    <p>
Portable Format for Analytics (PFA) is a specification for event-based
processors that perform predictive or analytic calculations and is aimed at
helping smooth the transition from statistical model development to large-scale
and/or online production. The <pkg>aurelius</pkg> package provides tools for converting R
objects and syntax into the PFA format.
    </p>
    
    <p>
Additionally, the <pkg>onnx</pkg> package provides the interface to <a href="https://onnx.ai/">Open Neural Network Exchange (ONNX)</a> which is a standard format for models built using different frameworks (e.g. TensorFlow, MXNet, PyTorch, etc).
    </p>
    
    <p><strong>Cloud/server-based Environments</strong></p>
    
    <p>
    Many deployment environments are based on cloud/server. The following packages
provides functionalities to deploy models in those types of environments:
    </p>

    <ul>
      <li>The <pkg>yhatr</pkg> package allows to deploy, maintain, and invoke models via the <a href="https://www.yhat.com">Yhat</a>
REST API.</li>
      <li>The <a href="https://github.com/rstudio/cloudml">cloudml</a> package provides functionality to easily deploy models to
<a href="https://cloud.google.com/ml-engine/">Google Cloud ML Engine</a>.
      <li>
        The <a href="https://github.com/rstudio/tfdeploy">tfdeploy</a> package provides functions to run a local test server that supports the same REST API as CloudML and <a href="https://www.rstudio.com/products/connect/">RStudio Connect</a>.
      </li>
      </li>
      <li>The <pkg>domino</pkg> package provides R interface to <a href="https://www.dominodatalab.com/">Domino</a> CLI, a service that makes it easy to run your code on scalable hardware, with integrated version control and collaboration features
designed for analytical workflows.
      </li>
      <li>The <pkg>tidypredict</pkg> package provides functionalities to run predictions inside database. However, it's still in early stage since currently only a small number of algorithms are supported. </li>
      <li>The <pkg>AzureML</pkg> package contains functions and datasets to support <a href="https://azure.microsoft.com/en-us/overview/machine-learning/">Azure Machine Learning<a/>. This allows you to interact with datasets, as well as publish and consume R functions as API services.</li>
      <li><a href="http://projects.revolutionanalytics.com/deployr/">DeployR Open</a> is a server-based
framework for integrating R into other applications via Web Services.</li>
      <li>The <pkg>opencpu</pkg> package provides a server that exposes a simple but powerful HTTP API for RPC and data interchange with R. This provides a reliable and scalable foundation for statistical services or building R web applications.</li>
      <li>Several general purpose server/client frameworks for R exist that could help
deploy models in server based environments:
        <ul>
          <li>The <pkg>Rserve</pkg> and <pkg>RSclient</pkg> packages both provide server and client functionality for TCP/IP or local socket interfaces.</li>
          <li>The <pkg>httpuv</pkg> package provides a low-level socket and protocol support for handling HTTP
    and WebSocket requests directly within R.</li>
        </ul>
      </li>
      <li>Several packages offer functionality for turning R code into a web API:
        <ul>
          <li>The <pkg>jug</pkg> package is a simple API-builder web framework, built around <pkg>httpuv</pkg>.</li>
          <li>The <pkg>FastRWeb</pkg> package provides some basic infrastructure for this. plumber allows you to create a REST API by decorating existing R source code.</li>
        </ul>
      </li>
      
    </ul>

  </info>

  <packagelist>
    <pkg>aurelius</pkg>
    <pkg>AzureML</pkg>
    <pkg>domino</pkg>
    <pkg>FastRWeb</pkg>
    <pkg>h2o</pkg>
    <pkg>httpuv</pkg>
    <pkg>jug</pkg>
    <pkg>keras</pkg>
    <pkg>onnx</pkg>
    <pkg>opencpu</pkg>
    <pkg>pmml</pkg>
    <pkg>pmmlTransformations</pkg>
    <pkg>rattle</pkg>
    <pkg>RSclient</pkg>
    <pkg>Rserve</pkg>
    <pkg>tensorflow</pkg>
    <pkg>tfestimators</pkg>
    <pkg>tidypredict</pkg>
    <pkg>yhatr</pkg>
    
  </packagelist>

  <links>
    <a href="https://github.com/terrytangyuan/ctv-model-deployment">GitHub repository for this Task View</a>
  </links>

</CRANTaskView>